if &compatible
    set nocompatible
endif

let g:python3_host_prog='C:\Users\rtianco\scoop\apps\python\current\python.exe'
let &grepprg='C:\Users\rtianco\scoop\apps\ripgrep\current\rg.exe --vimgrep'

call plug#begin(stdpath('data') . '/plugged')

    Plug 'neoclide/coc.nvim', { 'branch': 'release' }

    Plug 'sheerun/vim-polyglot'
    Plug 'airblade/vim-gitgutter'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-repeat'
    Plug 'wellle/targets.vim'
    Plug 'easymotion/vim-easymotion'
    Plug 'tommcdo/vim-exchange'
    Plug 'junegunn/vim-slash'
    Plug 'junegunn/vim-easy-align'
	Plug 'OmniSharp/omnisharp-vim'
	Plug 'jiangmiao/auto-pairs'

    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'

    " Plug 'antoinemadec/coc-fzf' " only works for unix (uses bash script)

    Plug 'kana/vim-textobj-user'
    Plug 'kana/vim-textobj-entire'
    Plug 'kana/vim-textobj-indent'
    Plug 'glts/vim-textobj-comment'
    Plug 'coderifous/textobj-word-column.vim'

    Plug 'drewtempelmeyer/palenight.vim'
    Plug 'junegunn/seoul256.vim'
    Plug 'itchyny/lightline.vim'

    Plug 'kassio/neoterm'

    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    augroup nerd_loader
        autocmd!
        autocmd VimEnter * silent! autocmd! FileExplorer
        autocmd BufEnter,BufNew *
                    \  if isdirectory(expand('<amatch>'))
                    \|   call plug#load('nerdtree')
                    \|   execute 'autocmd! nerd_loader'
                    \| endif
    augroup END

call plug#end()

let g:coc_global_extensions = [
    \'coc-explorer',
    \'coc-flutter', 
    \'coc-git',
    \'coc-go',
    \'coc-highlight',
    \'coc-json', 
    \'coc-markdownlint',
    \'coc-powershell',
    \'coc-python',
    \'coc-yank',
    \'coc-omnisharp',
    \'coc-vetur'
\]
    " \'coc-pairs',
    " \'coc-tabnine',

filetype plugin indent on
syntax enable

color seoul256
let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ }
set noshowmode

if has('nvim')
    " https://github.com/neovim/neovim/issues/2897#issuecomment-115464516
    let g:terminal_color_0 = '#4e4e4e'
    let g:terminal_color_1 = '#d68787'
    let g:terminal_color_2 = '#5f865f'
    let g:terminal_color_3 = '#d8af5f'
    let g:terminal_color_4 = '#85add4'
    let g:terminal_color_5 = '#d7afaf'
    let g:terminal_color_6 = '#87afaf'
    let g:terminal_color_7 = '#d0d0d0'
    let g:terminal_color_8 = '#626262'
    let g:terminal_color_9 = '#d75f87'
    let g:terminal_color_10 = '#87af87'
    let g:terminal_color_11 = '#ffd787'
    let g:terminal_color_12 = '#add4fb'
    let g:terminal_color_13 = '#ffafaf'
    let g:terminal_color_14 = '#87d7d7'
    let g:terminal_color_15 = '#e4e4e4'

    set fillchars=vert:\|,fold:-  " restore vim defaults"
    set inccommand=split

    autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
endif

" if exists('g:fvim_loaded')
"     autocmd UIEnter * runtime! ginit.vim
" endif

set ignorecase
set smartcase

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent

set clipboard+=unnamedplus

set nowrap

set ruler
set rulerformat=%l\:%c
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l\:%c%V%)
set showcmd

set notimeout

set visualbell

if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile

set dir=~/tmp,/tmp

set scrolloff=3
set sidescrolloff=7
set sidescroll=1

set splitbelow splitright

set cursorline

set list
set listchars=tab:>\ ,trail:~,eol:¬,nbsp:_,extends:»,precedes:« " invisible character


let mapleader=","
nnoremap <space> <nop>

" noremap <Leader>y "*y
" noremap <Leader>p "*p
" noremap <Leader>Y "*Y
" noremap <Leader>P "*P

nnoremap <silent> gO O<Esc>
nnoremap <silent> go o<Esc>

noremap <Leader>rc :e $MYVIMRC<CR>

" nnoremap <Leader>ws :%s/^\s\+$//<CR>

inoremap jk <Esc>
cnoremap jk <Esc>
" vnoremap jk <Esc> " actually annoying

nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" ----------------------------------------------------------------------------
" Moving lines
" ----------------------------------------------------------------------------
nnoremap <silent> <C-k> :move-2<cr>
nnoremap <silent> <C-j> :move+<cr>
nnoremap <silent> <C-h> <<
nnoremap <silent> <C-l> >>
xnoremap <silent> <C-k> :move-2<cr>gv
xnoremap <silent> <C-j> :move'>+<cr>gv
xnoremap <silent> <C-h> <gv
xnoremap <silent> <C-l> >gv
xnoremap < <gv
xnoremap > >gv

" delete buffer, leave window
nnoremap <leader>qq :bp<bar>sp<bar>bn<bar>bd<CR><CR>

" DOn't overwrite registry on paste
xnoremap p pgvy

nnoremap x "_x
nnoremap X "_X

if has('nvim')
  tnoremap <expr> <A-r> '<C-\><C-N>"'.nr2char(getchar()).'pi'
endif

if has('nvim')
  tnoremap jk <C-\><C-n>
endif

nnoremap <A-h> <c-w>h
nnoremap <A-j> <c-w>j
nnoremap <A-k> <c-w>k
nnoremap <A-l> <c-w>l

if has('nvim')
  tnoremap <A-h> <c-\><c-n><c-w>h
  tnoremap <A-j> <c-\><c-n><c-w>j
  tnoremap <A-k> <c-\><c-n><c-w>k
  tnoremap <A-l> <c-\><c-n><c-w>l
endif

" Clear vimrc augroup
augroup vimrc
    autocmd!
    au FileType asciidoc setlocal spell
    au FileType gitcommit setlocal spell
    au FileType gitcommit set signcolumn=no
    au FileType markdown setlocal spell
    au FileType svn setlocal spell
augroup END

function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Strip whitespaces
nnoremap <silent> <leader>ws :call StripTrailingWhitespace()<CR>

autocmd vimrc FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd vimrc FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd InsertLeave <buffer> call StripTrailingWhitespace()

" :Shell <cmd>
" put shell command in new buffer.
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
    botright new

    setlocal buftype=nofile
    setlocal bufhidden=delete
    setlocal nobuflisted
    setlocal noswapfile
    setlocal wrap
    setlocal filetype=shell
    setlocal syntax=shell

    call setline(1, a:cmdline)
    call setline(2, substitute(a:cmdline, '.', '=', 'g'))
    execute 'silent $read !' . escape(a:cmdline, '%#')
    setlocal nomodifiable
endfunction

" Make directory automatically.
" --------------------------------------
" http://vim-users.jp/2011/02/hack202/
autocmd vimrc BufWritePre *
            \ call s:mkdir_as_necessary(expand('<afile>:p:h'), v:cmdbang)
function! s:mkdir_as_necessary(dir, force)
    if !isdirectory(a:dir) && &l:buftype == '' &&
                \ (a:force || input(printf('"%s" does not exist. Create? [y/N]',
                \              a:dir)) =~? '^y\%[es]$')
        call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
endfunction

" --- Easymotion mappings ---
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

map <space> <Plug>(easymotion-prefix)

" <Leader>f{char} to move to {char}
map  <space>f <Plug>(easymotion-bd-f)
nmap <space>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <space>L <Plug>(easymotion-bd-jk)
nmap <space>L <Plug>(easymotion-overwin-line)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" Move to word
map  <space>w <Plug>(easymotion-bd-w)
nmap <space>w <Plug>(easymotion-overwin-w)

map <space>l <Plug>(easymotion-lineforward)
map <space>j <Plug>(easymotion-j)
map <space>k <Plug>(easymotion-k)
map <space>h <Plug>(easymotion-linebackward)

" --- remap comment-textobj ---
let g:textobj_comment_no_default_key_mappings = 1
xmap ax <Plug>(textobj-comment-a)
omap ax <Plug>(textobj-comment-a)
xmap ix <Plug>(textobj-comment-i)
omap ix <Plug>(textobj-comment-i)
xmap aX <Plug>(textobj-comment-big-a)
omap aX <Plug>(textobj-comment-big-a)

" --- NERD Tree ---
" TODO

" --- FZF mappings ---

if has('nvim') || has('gui_running')
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif


" All files
" command! -nargs=? -complete=dir AF
"   \ call fzf#run(fzf#wrap(fzf#vim#with_preview({
"   \   'source': 'fd --type f --hidden --follow --exclude .git --no-ignore . '.expand(<q-args>)
"   \ })))

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Terminal buffer options for fzf
autocmd! FileType fzf
autocmd  FileType fzf set noshowmode noruler nonu

if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,60%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
endif

" nnoremap <silent> <Leader><Leader> :Files<CR>
nnoremap <silent> <expr> <space><space> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
nnoremap <silent> <space>C        :Colors<CR>
nnoremap <silent> <space><Enter>  :Buffers<CR>
nnoremap <silent> <space><C-l>        :Lines<CR>
nnoremap <silent> <space>rg       :Rg <C-R><C-W><CR>
nnoremap <silent> <space>RG       :Rg <C-R><C-A><CR>
xnoremap <silent> <space>rg       y:Rg <C-R>"<CR>
nnoremap <silent> <space>`        :Marks<CR>

nnoremap <C-T> :Files<CR>
nnoremap <space>b :Buffers<CR>
nnoremap <silent> q: :History:<CR>
nnoremap <silent> q/ :History/<CR>

" inoremap <expr> <c-x><c-t> fzf#complete('tmuxwords.rb --all-but-current --scroll 499 --min 5')
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
inoremap <expr> <c-x><c-d> fzf#vim#complete#path('blsd')
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)

function! s:plug_help_sink(line)
  let dir = g:plugs[a:line].dir
  for pat in ['doc/*.txt', 'README.md']
    let match = get(split(globpath(dir, pat), "\n"), 0, '')
    if len(match)
      execute 'tabedit' match
      return
    endif
  endfor
  tabnew
  execute 'Explore' dir
endfunction

command! PlugHelp call fzf#run(fzf#wrap({
  \ 'source': sort(keys(g:plugs)),
  \ 'sink':   function('s:plug_help_sink')}))

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let options = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  if a:fullscreen
    let options = fzf#vim#with_preview(options)
  endif
  call fzf#vim#grep(initial_command, 1, options, a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

let g:fzf_layout = { 'down': '~40%' }
" let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" --- testing mappings (stolen) ---

" if exists("g:loaded_easy_align")
"   xmap ga <Plug>(EasyAlign)
"   nmap ga <Plug>(EasyAlign)
" endif

" buffer and window mappings
" nmap <leader>bd :bd<CR>
" nmap <leader>bn :bn<CR>
" nmap <leader>bp :bp<CR>
" nnoremap <Leader>b :buffers<CR>
" nmap <leader>w <c-w>
nmap <space><tab> <c-^>
" nmap <leader>wa <c-w>v
" nmap <leader>wC :w \| %.bak \| e#<CR>

" --- Coc configs ---

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>F  <Plug>(coc-format-selected)
nmap <leader>F  <Plug>(coc-format-selected)

augroup cocgroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics --current-buf<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space><c-j>  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space><c-k>  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>rl  :<C-u>CocListResume<CR>


" --- vim-easy-align ---

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" --- Denite config ---

"" Define mappings
"autocmd FileType denite call s:denite_my_settings()
"function! s:denite_my_settings() abort
"  nnoremap <silent><buffer><expr> <CR>
"  \ denite#do_map('do_action')
"  nnoremap <silent><buffer><expr> d
"  \ denite#do_map('do_action', 'delete')
"  nnoremap <silent><buffer><expr> p
"  \ denite#do_map('do_action', 'preview')
"  nnoremap <silent><buffer><expr> q
"  \ denite#do_map('quit')
"  nnoremap <silent><buffer><expr> i
"  \ denite#do_map('open_filter_buffer')
"  nnoremap <silent><buffer><expr> <Space>
"  \ denite#do_map('toggle_select').'j'
"endfunction

"autocmd FileType denite-filter call s:denite_filter_my_settings()
"function! s:denite_filter_my_settings() abort
"  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
"endfunction

"" Change file/rec command.
"" call denite#custom#var('file/rec', 'command',
"" \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
"" For ripgrep
"" Note: It is slower than ag
"call denite#custom#var('file/rec', 'command',
"\ ['rg', '--files', '--glob', '!.git'])
"" For Pt(the platinum searcher)
"" NOTE: It also supports windows.
"" call denite#custom#var('file/rec', 'command',
"" \ ['pt', '--follow', '--nocolor', '--nogroup',
"" \  (has('win32') ? '-g:' : '-g='), ''])
"" For python script scantree.py
"" Read bellow on this file to learn more about scantree.py
"" call denite#custom#var('file/rec', 'command',
"" \ ['scantree.py', '--path', ':directory'])

"" Change matchers.
"call denite#custom#source(
"\ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
"call denite#custom#source(
"\ 'file/rec', 'matchers', ['matcher/cpsm'])

"" Change sorters.
"call denite#custom#source(
"\ 'file/rec', 'sorters', ['sorter/sublime'])

"" Change default action.
"call denite#custom#kind('file', 'default_action', 'split')

"" Add custom menus
"" let s:menus = {}

"" let s:menus.zsh = {
""     \ 'description': 'Edit your import zsh configuration'
""     \ }
"" let s:menus.zsh.file_candidates = [
""     \ ['zshrc', '~/.config/zsh/.zshrc'],
""     \ ['zshenv', '~/.zshenv'],
""     \ ]

"" let s:menus.my_commands = {
""     \ 'description': 'Example commands'
""     \ }
"" let s:menus.my_commands.command_candidates = [
""     \ ['Split the window', 'vnew'],
""     \ ['Open zsh menu', 'Denite menu:zsh'],
""     \ ['Format code', 'FormatCode', 'go,python'],
""     \ ]

"" call denite#custom#var('menu', 'menus', s:menus)

"" Ag command on grep source
"call denite#custom#var('grep', 'command', ['ag'])
"call denite#custom#var('grep', 'default_opts',
"        \ ['-i', '--vimgrep'])
"call denite#custom#var('grep', 'recursive_opts', [])
"call denite#custom#var('grep', 'pattern_opt', [])
"call denite#custom#var('grep', 'separator', ['--'])
"call denite#custom#var('grep', 'final_opts', [])

"" Ack command on grep source
"call denite#custom#var('grep', 'command', ['ack'])
"call denite#custom#var('grep', 'default_opts',
"        \ ['--ackrc', $HOME.'/.ackrc', '-H', '-i',
"        \  '--nopager', '--nocolor', '--nogroup', '--column'])
"call denite#custom#var('grep', 'recursive_opts', [])
"call denite#custom#var('grep', 'pattern_opt', ['--match'])
"call denite#custom#var('grep', 'separator', ['--'])
"call denite#custom#var('grep', 'final_opts', [])

"" Ripgrep command on grep source
"call denite#custom#var('grep', 'command', ['rg'])
"call denite#custom#var('grep', 'default_opts',
"        \ ['-i', '--vimgrep', '--no-heading'])
"call denite#custom#var('grep', 'recursive_opts', [])
"call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
"call denite#custom#var('grep', 'separator', ['--'])
"call denite#custom#var('grep', 'final_opts', [])

"" Pt command on grep source
"call denite#custom#var('grep', 'command', ['pt'])
"call denite#custom#var('grep', 'default_opts',
"        \ ['-i', '--nogroup', '--nocolor', '--smart-case'])
"call denite#custom#var('grep', 'recursive_opts', [])
"call denite#custom#var('grep', 'pattern_opt', [])
"call denite#custom#var('grep', 'separator', ['--'])
"call denite#custom#var('grep', 'final_opts', [])

"" jvgrep command on grep source
"call denite#custom#var('grep', 'command', ['jvgrep'])
"call denite#custom#var('grep', 'default_opts', ['-i'])
"call denite#custom#var('grep', 'recursive_opts', ['-R'])
"call denite#custom#var('grep', 'pattern_opt', [])
"call denite#custom#var('grep', 'separator', [])
"call denite#custom#var('grep', 'final_opts', [])

"" Specify multiple paths in grep source
""call denite#start([{'name': 'grep',
""      \ 'args': [['a.vim', 'b.vim'], '', 'pattern']}])

"" Define alias
"call denite#custom#alias('source', 'file/rec/git', 'file/rec')
"call denite#custom#var('file/rec/git', 'command',
"      \ ['git', 'ls-files', '-co', '--exclude-standard'])

"call denite#custom#alias('source', 'file/rec/py', 'file/rec')
"call denite#custom#var('file/rec/py', 'command',
"\ ['scantree.py', '--path', ':directory'])

"" Change ignore_globs
"call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
"      \ [ '.git/', '.ropeproject/', '__pycache__/',
"      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

"" Custom action
"" Note: lambda function is not supported in Vim8.
"call denite#custom#action('file', 'test',
"      \ {context -> execute('let g:foo = 1')})
"call denite#custom#action('file', 'test2',
"      \ {context -> denite#do_action(
"      \  context, 'open', context['targets'])})

"" let g:coc_node_args = ['--nolazy', '--inspect-brk=6045']

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
